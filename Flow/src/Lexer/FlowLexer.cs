//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Flow.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class FlowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		WS=18, TRUE=19, FALSE=20, ADD=21, SUB=22, MUL=23, DIV=24, MOD=25, EQ=26, 
		NEQ=27, LT=28, LTE=29, GT=30, GTE=31, AND=32, OR=33, NOT=34, LPAREN=35, 
		RPAREN=36, LBRACE=37, RBRACE=38, LBRACK=39, RBRACK=40, COMMA=41, SEMICOLON=42, 
		COLON=43, ARROW=44, INTEGER=45, IDENTIFIER=46, COMMENT=47, BLOCK_COMMENT=48, 
		STRING=49, ERR_CHAR=50, ERR_TOKEN=51;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"WS", "TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", 
		"LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACK", "RBRACK", "COMMA", "SEMICOLON", "COLON", "ARROW", 
		"INTEGER", "IDENTIFIER", "COMMENT", "BLOCK_COMMENT", "STRING", "ERR_CHAR", 
		"ERR_TOKEN"
	};


	public FlowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FlowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'module'", "'var'", "'='", "'array'", "'map'", "'int'", 
		"'bool'", "'string'", "'Print'", "'if'", "'else'", "'while'", "'for'", 
		"'in'", "'return'", "'let'", null, "'true'", "'false'", "'+'", "'-'", 
		"'*'", "'/'", "'mod'", "'is'", "'is not'", "'<'", "'<='", "'>'", "'>='", 
		"'and'", "'or'", "'not'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
		"';'", "':'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WS", "TRUE", "FALSE", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", 
		"NOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "COMMA", 
		"SEMICOLON", "COLON", "ARROW", "INTEGER", "IDENTIFIER", "COMMENT", "BLOCK_COMMENT", 
		"STRING", "ERR_CHAR", "ERR_TOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Flow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FlowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,51,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
		6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,17,4,17,189,8,17,11,17,12,17,190,1,17,
		1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
		1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
		1,41,1,42,1,42,1,43,1,43,1,43,1,44,4,44,271,8,44,11,44,12,44,272,1,45,
		1,45,5,45,277,8,45,10,45,12,45,280,9,45,1,46,1,46,1,46,1,46,5,46,286,8,
		46,10,46,12,46,289,9,46,1,46,1,46,1,47,1,47,5,47,295,8,47,10,47,12,47,
		298,9,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,308,8,48,10,48,12,
		48,311,9,48,1,48,1,48,1,49,1,49,1,50,1,50,1,296,0,51,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
		83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,1,0,6,3,0,
		9,10,13,13,32,32,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,10,10,13,13,2,0,34,34,92,92,324,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,
		0,0,3,110,1,0,0,0,5,117,1,0,0,0,7,121,1,0,0,0,9,123,1,0,0,0,11,129,1,0,
		0,0,13,133,1,0,0,0,15,137,1,0,0,0,17,142,1,0,0,0,19,149,1,0,0,0,21,155,
		1,0,0,0,23,158,1,0,0,0,25,163,1,0,0,0,27,169,1,0,0,0,29,173,1,0,0,0,31,
		176,1,0,0,0,33,183,1,0,0,0,35,188,1,0,0,0,37,194,1,0,0,0,39,199,1,0,0,
		0,41,205,1,0,0,0,43,207,1,0,0,0,45,209,1,0,0,0,47,211,1,0,0,0,49,213,1,
		0,0,0,51,217,1,0,0,0,53,220,1,0,0,0,55,227,1,0,0,0,57,229,1,0,0,0,59,232,
		1,0,0,0,61,234,1,0,0,0,63,237,1,0,0,0,65,241,1,0,0,0,67,244,1,0,0,0,69,
		248,1,0,0,0,71,250,1,0,0,0,73,252,1,0,0,0,75,254,1,0,0,0,77,256,1,0,0,
		0,79,258,1,0,0,0,81,260,1,0,0,0,83,262,1,0,0,0,85,264,1,0,0,0,87,266,1,
		0,0,0,89,270,1,0,0,0,91,274,1,0,0,0,93,281,1,0,0,0,95,292,1,0,0,0,97,303,
		1,0,0,0,99,314,1,0,0,0,101,316,1,0,0,0,103,104,5,105,0,0,104,105,5,109,
		0,0,105,106,5,112,0,0,106,107,5,111,0,0,107,108,5,114,0,0,108,109,5,116,
		0,0,109,2,1,0,0,0,110,111,5,109,0,0,111,112,5,111,0,0,112,113,5,100,0,
		0,113,114,5,117,0,0,114,115,5,108,0,0,115,116,5,101,0,0,116,4,1,0,0,0,
		117,118,5,118,0,0,118,119,5,97,0,0,119,120,5,114,0,0,120,6,1,0,0,0,121,
		122,5,61,0,0,122,8,1,0,0,0,123,124,5,97,0,0,124,125,5,114,0,0,125,126,
		5,114,0,0,126,127,5,97,0,0,127,128,5,121,0,0,128,10,1,0,0,0,129,130,5,
		109,0,0,130,131,5,97,0,0,131,132,5,112,0,0,132,12,1,0,0,0,133,134,5,105,
		0,0,134,135,5,110,0,0,135,136,5,116,0,0,136,14,1,0,0,0,137,138,5,98,0,
		0,138,139,5,111,0,0,139,140,5,111,0,0,140,141,5,108,0,0,141,16,1,0,0,0,
		142,143,5,115,0,0,143,144,5,116,0,0,144,145,5,114,0,0,145,146,5,105,0,
		0,146,147,5,110,0,0,147,148,5,103,0,0,148,18,1,0,0,0,149,150,5,80,0,0,
		150,151,5,114,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,116,0,
		0,154,20,1,0,0,0,155,156,5,105,0,0,156,157,5,102,0,0,157,22,1,0,0,0,158,
		159,5,101,0,0,159,160,5,108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,
		24,1,0,0,0,163,164,5,119,0,0,164,165,5,104,0,0,165,166,5,105,0,0,166,167,
		5,108,0,0,167,168,5,101,0,0,168,26,1,0,0,0,169,170,5,102,0,0,170,171,5,
		111,0,0,171,172,5,114,0,0,172,28,1,0,0,0,173,174,5,105,0,0,174,175,5,110,
		0,0,175,30,1,0,0,0,176,177,5,114,0,0,177,178,5,101,0,0,178,179,5,116,0,
		0,179,180,5,117,0,0,180,181,5,114,0,0,181,182,5,110,0,0,182,32,1,0,0,0,
		183,184,5,108,0,0,184,185,5,101,0,0,185,186,5,116,0,0,186,34,1,0,0,0,187,
		189,7,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,
		0,0,0,191,192,1,0,0,0,192,193,6,17,0,0,193,36,1,0,0,0,194,195,5,116,0,
		0,195,196,5,114,0,0,196,197,5,117,0,0,197,198,5,101,0,0,198,38,1,0,0,0,
		199,200,5,102,0,0,200,201,5,97,0,0,201,202,5,108,0,0,202,203,5,115,0,0,
		203,204,5,101,0,0,204,40,1,0,0,0,205,206,5,43,0,0,206,42,1,0,0,0,207,208,
		5,45,0,0,208,44,1,0,0,0,209,210,5,42,0,0,210,46,1,0,0,0,211,212,5,47,0,
		0,212,48,1,0,0,0,213,214,5,109,0,0,214,215,5,111,0,0,215,216,5,100,0,0,
		216,50,1,0,0,0,217,218,5,105,0,0,218,219,5,115,0,0,219,52,1,0,0,0,220,
		221,5,105,0,0,221,222,5,115,0,0,222,223,5,32,0,0,223,224,5,110,0,0,224,
		225,5,111,0,0,225,226,5,116,0,0,226,54,1,0,0,0,227,228,5,60,0,0,228,56,
		1,0,0,0,229,230,5,60,0,0,230,231,5,61,0,0,231,58,1,0,0,0,232,233,5,62,
		0,0,233,60,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,0,236,62,1,0,0,0,237,
		238,5,97,0,0,238,239,5,110,0,0,239,240,5,100,0,0,240,64,1,0,0,0,241,242,
		5,111,0,0,242,243,5,114,0,0,243,66,1,0,0,0,244,245,5,110,0,0,245,246,5,
		111,0,0,246,247,5,116,0,0,247,68,1,0,0,0,248,249,5,40,0,0,249,70,1,0,0,
		0,250,251,5,41,0,0,251,72,1,0,0,0,252,253,5,123,0,0,253,74,1,0,0,0,254,
		255,5,125,0,0,255,76,1,0,0,0,256,257,5,91,0,0,257,78,1,0,0,0,258,259,5,
		93,0,0,259,80,1,0,0,0,260,261,5,44,0,0,261,82,1,0,0,0,262,263,5,59,0,0,
		263,84,1,0,0,0,264,265,5,58,0,0,265,86,1,0,0,0,266,267,5,45,0,0,267,268,
		5,62,0,0,268,88,1,0,0,0,269,271,7,1,0,0,270,269,1,0,0,0,271,272,1,0,0,
		0,272,270,1,0,0,0,272,273,1,0,0,0,273,90,1,0,0,0,274,278,7,2,0,0,275,277,
		7,3,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
		0,279,92,1,0,0,0,280,278,1,0,0,0,281,282,5,47,0,0,282,283,5,47,0,0,283,
		287,1,0,0,0,284,286,8,4,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,
		0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,6,46,0,0,
		291,94,1,0,0,0,292,296,5,35,0,0,293,295,9,0,0,0,294,293,1,0,0,0,295,298,
		1,0,0,0,296,297,1,0,0,0,296,294,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,
		0,299,300,5,35,0,0,300,301,1,0,0,0,301,302,6,47,0,0,302,96,1,0,0,0,303,
		309,5,34,0,0,304,308,8,5,0,0,305,306,5,92,0,0,306,308,9,0,0,0,307,304,
		1,0,0,0,307,305,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,
		0,310,312,1,0,0,0,311,309,1,0,0,0,312,313,5,34,0,0,313,98,1,0,0,0,314,
		315,9,0,0,0,315,100,1,0,0,0,316,317,8,4,0,0,317,102,1,0,0,0,8,0,190,272,
		278,287,296,307,309,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
